#include &lt;stdio.h&gt;

#include &lt;stdlib.h&gt;
#include &lt;malloc.h&gt;
#include &lt;string.h&gt;
#include &lt;ctype.h&gt;

int size = 0;
char keyword[30][30] = {&quot;int&quot;, &quot;while&quot;, &quot;break&quot;, &quot;for&quot;, &quot;do&quot;, &quot;if&quot;, &quot;float&quot;, &quot;char&quot;, &quot;switch&quot;, &quot;double&quot;,
&quot;short&quot;, &quot;long&quot;, &quot;unsigned&quot;, &quot;sizeof&quot;, &quot;else&quot;, &quot;register&quot;, &quot;extern&quot;, &quot;static&quot;, &quot;auto&quot;, &quot;case&quot;, &quot;break&quot;,
&quot;volatile&quot;, &quot;enum&quot;, &quot;typedef&quot;};
char id[20], num[10], op[5];
char symb_tab[50][20];
int idx = 0;

int check_keyword(char s[])
{
int i;
for (i = 0; i &lt; 24; i++)
if (strcmp(s, keyword[i]) == 0)
return 1;
return 0;
}

void store_symb_tab(char id[], char symb_tab[][20])
{
int flag = 0, i;
for (i = 0; i &lt; idx; i++)
{
if (strcmp(id, symb_tab[i]) == 0)

{
flag = 1;
}
}
if (flag == 0)
{
strcpy(symb_tab[idx], id);
idx++;
}
}

void main()
{
FILE *fp1, *fp2;
char c;
int state = 0;
int i = 0, j = 0, k = 0;
fp1 = fopen(&quot;Input.txt&quot;, &quot;r&quot;);
fp2 = fopen(&quot;Output.txt&quot;, &quot;w&quot;);

while ((c = fgetc(fp1)) != EOF)
{
switch (state)
{
case 0:
if (isalpha(c))
{

state = 1;
id[i++] = c;
}
else if (isdigit(c))
{
state = 3;
num[j++] = c;
}
else if (c == &#39;&lt;&#39; || c == &#39;&gt;&#39;)
{
state = 5;
op[k++] = c;
}
else if (c == &#39;=&#39; || c == &#39;!&#39;)
{
state = 8;
op[k++] = c;
}
else if (c == &#39;/&#39;)
state = 10;
else if (c == &#39; &#39; || c == &#39;\t&#39; || c == &#39;\n&#39;)
state = 0;
else
fprintf(fp2, &quot;\n%c&quot;, c);
break;
case 1:
if (isalnum(c))

{
state = 1;
id[i++] = c;
}
else
{
id[i] = &#39;\0&#39;;
if (check_keyword(id))
fprintf(fp2, &quot;\n%s : keyword &quot;, id);
else
{
fprintf(fp2, &quot;\n%s : identifier&quot;, id);
store_symb_tab(id, symb_tab);
}

state = 0;
i = 0;
ungetc(c, fp1);
}
break;
case 3:
if (isdigit(c))
{
num[j++] = c;
state = 3;
}
else

{
num[j] = &#39;\0&#39;;
fprintf(fp2, &quot;\n%s: number&quot;, num);
state = 0;
j = 0;
ungetc(c, fp1);
}
break;
case 5:
if (c == &#39;=&#39;)
{
state = 0;
}
else
{
state = 0;
ungetc(c, fp1);
}
op[k++] = c;
op[k] = &#39;\0&#39;;
fprintf(fp2, &quot;\n%s : relational operator &quot;, op);
k = 0;
break;
case 8:
if (c == &#39;=&#39;)
{
op[k++] = c;

op[k] = &#39;\0&#39;;
fprintf(fp2, &quot;\n%s : relational operator &quot;, op);
k = 0;
state = 0;
}
else
{
ungetc(c, fp1);
state = 0;
}
break;
case 10:
if (c == &#39;*&#39;)
state = 11;
else
fprintf(fp2, &quot;\ninvalid lexeme&quot;);
break;
case 11:
if (c == &#39;*&#39;)
state = 12;
else
state = 11;
break;
case 12:
if (c == &#39;*&#39;)
state = 12;
else if (c == &#39;/&#39;)

state = 0;
else
state = 11;
break;

}
}
if (state == 11)
fprintf(fp2, &quot;comment did not close&quot;);
fclose(fp1);
fclose(fp2);
}
